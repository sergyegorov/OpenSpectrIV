/*
 * The MIT License
 *
 * Copyright 2014 root.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package os4.dev.method.aspect;

import java.awt.BorderLayout;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JPanel;

import os4.Common;
import os4.OS4Exception;
import os4.dev.AbstractDevice;
import os4.dev.AbstractMeasuringCondition;
import os4.dev.SpectrData;
import os4.dev.method.AbstractChanel;
import os4.dev.method.AbstractMethod;
import os4.dev.method.IMethodAspectEditor;
import os4.dev.method.IMethodChanelSet;
import os4.dev.method.chanels.MultiLineSpectrChanelEditor;
import os4.serv.Dialogs;
import os4.serv.ListSimpleDriver;
import os4.serv.Rectangle3D;
import os4.task.comp.CustomDrawingViewer;

/**
 *
 * @author root
 */
public class AspectChanelSetEditor extends javax.swing.JPanel 
    implements IMethodAspectEditor{
    public static final Logger Log = Common.getLogger(AspectChanelSetEditor.class);
    
    IMethodChanelSet ChanelSet;
    AbstractMethod Method;
    ListSimpleDriver<AbstractChanel> ListDriver;
    CustomDrawingViewer SpViewer;
    /**
     * Creates new form AspectrChanelSetEditor
     * @param method
     */
    public AspectChanelSetEditor(AbstractMethod method) {
        Method = method;
        ChanelSet = (IMethodChanelSet)method.getAspect(AbstractMethod.ASPECT_CHANEL);
        initComponents();
        SpViewer = new CustomDrawingViewer(Method.getFile(null).getAbsolutePath());
        jpSpectr.add(SpViewer);
        ListDriver = new ListSimpleDriver() {
            @Override
            public Object createNewCallBack() throws Exception{
                String val = Dialogs.getStringMLS("Введите имя создаваемого канала", "Новый канал");
                if(val == null)
                    return null;
                AbstractChanel ch = ChanelSet.addChanel(val);// Method.createNewChanel();
                updateList();
                return null;
            }

            @Override
            public void removeCallBack(Object val) throws Exception {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void selectCallBack(Object val) throws Exception{
                AbstractChanel ac = (AbstractChanel)val;
                MultiLineSpectrChanelEditor editor = (MultiLineSpectrChanelEditor)ac.getEditor();
                editor.init(SpViewer);
                jpChanelEditor.removeAll();
                jpChanelEditor.add(editor,BorderLayout.CENTER);
                jpChanelEditor.revalidate();
                jpChanelEditor.repaint();
                
            }
        };
        ListDriver.init(jlChanelList, jbCreateChanel, jbDelete);
        updateList();
        try {
            updateSpectr();
        } catch (IOException ex) {
            Log.log(Level.SEVERE, "Update spectr", ex);
        }
    }

    public final void updateList(){
        ListDriver.clear();
        for(int i = 0;i<ChanelSet.getChanelCount();i++){
            AbstractChanel ch = ChanelSet.getChanel(i);
            ListDriver.add(ch);
        }
        ListDriver.upToDate(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlChanelList = new javax.swing.JList();
        jbCreateChanel = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jpChanelEditor = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jbSetCondition = new javax.swing.JButton();
        jbMeasuring = new javax.swing.JButton();
        jpSpectr = new javax.swing.JPanel();

        jSplitPane1.setDividerLocation(150);

        jLabel1.setText("Каналы");

        jlChanelList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jlChanelList);

        jbCreateChanel.setText("Создать новый");

        jbDelete.setText("Удалить");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jbCreateChanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jbDelete))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbCreateChanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbDelete))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jSplitPane2.setDividerLocation(190);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jpChanelEditor.setLayout(new java.awt.BorderLayout());
        jSplitPane2.setTopComponent(jpChanelEditor);

        jbSetCondition.setText("Условия измерений");
        jbSetCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSetConditionActionPerformed(evt);
            }
        });

        jbMeasuring.setText("Измерить");
        jbMeasuring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMeasuringActionPerformed(evt);
            }
        });

        jpSpectr.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 244, Short.MAX_VALUE)
                .addComponent(jbSetCondition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbMeasuring, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jpSpectr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jpSpectr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSetCondition)
                    .addComponent(jbMeasuring)))
        );

        jSplitPane2.setRightComponent(jPanel3);

        jSplitPane1.setRightComponent(jSplitPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    AbstractMeasuringCondition Condition = null;
    File ConditionFile;
    private AbstractMeasuringCondition getCurrentCondition() throws FileNotFoundException, IOException{
        if(Condition == null){
            ConditionFile = Method.getFile("condition.bin");
            if(ConditionFile.exists()){
                FileInputStream fis = new FileInputStream(ConditionFile);
                BufferedInputStream bis = new BufferedInputStream(fis);
                try (DataInputStream dis = new DataInputStream(bis)) {
                    Condition = AbstractMeasuringCondition.loadFrom(dis);
                }
            } else {
                ConditionFile.createNewFile();
                Condition = Common.getDevice().getDefaultCondition();
                commitCondition(Condition);
            }            
        }
        return Condition;
    }
    
    void commitCondition(AbstractMeasuringCondition cond) throws FileNotFoundException, IOException{
        FileOutputStream fos = new FileOutputStream(ConditionFile);
        try (DataOutputStream dos = new DataOutputStream(fos)) {
            cond.save(dos);
            dos.flush();
        }
        Condition = cond;
    }
    
    private void jbSetConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSetConditionActionPerformed
        try{
            AbstractMeasuringCondition cond = getCurrentCondition();
            JPanel pan = cond.getGUIEditor();
            boolean ret = Dialogs.showDialogWithCustomPanelMLS("Условия измерений",pan);
            if(ret)
                commitCondition(cond);
        }catch(Exception ex){
            Log.log(Level.SEVERE, "Can't set condition", ex);
        }
    }//GEN-LAST:event_jbSetConditionActionPerformed

    Rectangle3D SpViewRect;
    final void updateSpectr() throws IOException{
        File f = Method.getFile(EtalonFileName);
        if(f.exists()){
            SpectrData data = new SpectrData(f);
            SpViewRect = SpViewer.init(data,SpViewRect);
        } else
            SpViewRect = SpViewer.init(null,SpViewRect);
        SpViewer.repaint();
    }
    
    public final static String EtalonFileName = "etalon"+Common.SpectrExt;
    private void jbMeasuringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMeasuringActionPerformed
        try{
            AbstractDevice dev = Common.getDevice();
            if(dev == null)
                return;
            File f = Method.getFile(null);
            try {
                SpectrData data = dev.measuring(getCurrentCondition());
                String file_path = f.getAbsolutePath();
                file_path += File.separator+EtalonFileName;
                data.save(new File(file_path));
                updateSpectr();
            } catch (OS4Exception ex) {
                Log.log(Level.SEVERE, "Internal error", ex);
            } catch (IOException ex) {
                Log.log(Level.SEVERE, "IOException", ex);
            }
        }catch(Exception ex){
            Log.log(Level.SEVERE, "Can't measuring", ex);
        }
    }//GEN-LAST:event_jbMeasuringActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JButton jbCreateChanel;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbMeasuring;
    private javax.swing.JButton jbSetCondition;
    private javax.swing.JList jlChanelList;
    private javax.swing.JPanel jpChanelEditor;
    private javax.swing.JPanel jpSpectr;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update() {
    }

    @Override
    public JPanel getPanel() {
        return this;
    }
}
