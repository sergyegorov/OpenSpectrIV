/*
 * The MIT License
 *
 * Copyright 2014 root.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package os4.task;

import java.awt.BorderLayout;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import os4.Common;
import os4.MainConfig;
import os4.Mls;
import os4.task.params.AbstractGUIParameter;

/**
 *
 * @author root
 */
public class TaskSetup extends javax.swing.JPanel implements AbstractTask {
    private static final Logger Log = Common.getLogger( TaskSetup.class );
    /**
     * Creates new form TaskSetup
     */
    public TaskSetup() {
        initComponents();
        
        jtValueTree.setRootVisible(false);
        jtValueTree.getSelectionModel().setSelectionMode
            (TreeSelectionModel.SINGLE_TREE_SELECTION);
        DefaultMutableTreeNode root = MainConfig.Values.getTree();
        DefaultTreeModel model = new DefaultTreeModel(root);
        jtValueTree.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtValueTree = new javax.swing.JTree();
        jpParameterView = new javax.swing.JPanel();

        jSplitPane1.setDividerLocation(200);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));

        jtValueTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jtValueTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jtValueTree);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jpParameterView.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(jpParameterView);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    AbstractGUIParameter Selected;
    JPanel NulPanel = new JPanel();
    private void jtValueTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jtValueTreeValueChanged
        try{
            JPanel pan;
            DefaultMutableTreeNode node = (DefaultMutableTreeNode)jtValueTree.getLastSelectedPathComponent();
            Object user_object = node.getUserObject();
            if(user_object instanceof AbstractGUIParameter){
                AbstractGUIParameter param = (AbstractGUIParameter)user_object;
                pan = param.getGui();
            }
            else
                pan = NulPanel;
            jpParameterView.removeAll();
            jpParameterView.add(pan,BorderLayout.CENTER);
            jpParameterView.revalidate();
            jpParameterView.repaint();
        }catch(Exception ex){
            Log.log(Level.SEVERE,"Main config parameter selection error",ex);
        }
    }//GEN-LAST:event_jtValueTreeValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel jpParameterView;
    private javax.swing.JTree jtValueTree;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getGUIName() {
        return Mls.get("Настройка программы");
    }

    @Override
    public JPanel open() {
        return this;
    }

    @Override
    public void close() {
        
    }

    @Override
    public int GetUserLevel() {
        return Common.USER_LEVEL_SETUP;
    }

    @Override
    public File getFile(String name) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
