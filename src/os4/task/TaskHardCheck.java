/*
 * The MIT License
 *
 * Copyright 2014 root.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package os4.task;

import java.awt.BorderLayout;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import os4.Common;
import os4.MainConfig;
import os4.Mls;
import os4.OS4Exception;
import os4.analit.Function;
import os4.analit.SpectrPatternFinder;
import os4.analit.SpectrTools;
import os4.dev.AbstractDevice;
import os4.dev.AbstractMeasuringCondition;
import os4.dev.SensorConfig;
import os4.dev.SpectrData;
import os4.dev.SpectrDispers;
import os4.dev.SpectrRawData;
import os4.serv.Dialogs;
import os4.serv.Rectangle3D;
import os4.serv.StreamTools;
import os4.task.comp.CustomDrawingViewer;

/**
 *
 * @author root
 */
public class TaskHardCheck extends javax.swing.JPanel implements AbstractTask {
    private static final Logger Log = Common.getLogger( TaskHardCheck.class ); 
    
    CustomDrawingViewer SpectrView;
    /**
     * Creates new form TaskHardCheck
     */
    public TaskHardCheck() {
        initComponents();
        Mls.translate(this);
        SpectrView = new CustomDrawingViewer(getFile(null).getAbsolutePath());
        jpSpCont.add(SpectrView,BorderLayout.CENTER);
    }
    
    public static File getBaseDir(){
        File f;
        f = new File(Common.DirData+File.separator+"HCheck");
        if(f.exists() == false)
            f.mkdir();
        return f;
    }
    
    public static File getEtalonFile(){
        String path = getBaseDir().getAbsolutePath()+File.separator+"etalon."+Common.SpectrExt;
        File f = new File(path);
        return f;
    }
    
    final public static File getCurrentFile(){
        String path = getBaseDir().getAbsolutePath()+File.separator+"current."+Common.SpectrExt;
        File f = new File(path);
        return f;
    }

    final public static File getConditionFile(){
        String path = getBaseDir().getAbsolutePath()+File.separator+"condition.bin";
        File f = new File(path);
        return f;
    }
    
    @Override
    final public File getFile(String name){
        File f;
        if(name == null)
            return getBaseDir();
        else
            f = new File(getBaseDir()+File.separator+name); 
        return f;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbCheckStart = new javax.swing.JButton();
        jbResultsIsOk = new javax.swing.JButton();
        jbSkipCheck = new javax.swing.JButton();
        jpSpCont = new javax.swing.JPanel();
        jbCheckNoMeasuring = new javax.swing.JButton();

        jbCheckStart.setText("Начать проверку");
        jbCheckStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCheckStartActionPerformed(evt);
            }
        });

        jbResultsIsOk.setText("Оборудование исправно");
        jbResultsIsOk.setEnabled(false);

        jbSkipCheck.setText("Пропустить проверку");
        jbSkipCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSkipCheckActionPerformed(evt);
            }
        });

        jpSpCont.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jpSpCont.setLayout(new java.awt.BorderLayout());

        jbCheckNoMeasuring.setText("Без измерений");
        jbCheckNoMeasuring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCheckNoMeasuringActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jbResultsIsOk, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
            .addComponent(jpSpCont, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jbSkipCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jbCheckStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbCheckNoMeasuring))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCheckStart)
                    .addComponent(jbCheckNoMeasuring))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpSpCont, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbResultsIsOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbSkipCheck))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbSkipCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSkipCheckActionPerformed
        try{
            Common.MainWindow.ShowTask(new TaskMainFunctionSelector());
        }catch(Exception ex){
            Log.log(Level.SEVERE,"Can't open main function selector screen",ex);
        }
    }//GEN-LAST:event_jbSkipCheckActionPerformed

    AbstractMeasuringCondition Condition = null;
    File ConditionFile;
    private AbstractMeasuringCondition getCurrentCondition() throws FileNotFoundException, IOException{
        if(Condition == null){
            ConditionFile = getFile("condition.bin");
            if(ConditionFile.exists()){
                FileInputStream fis = new FileInputStream(ConditionFile);
                BufferedInputStream bis = new BufferedInputStream(fis);
                DataInputStream dis = new DataInputStream(bis);
                Condition = AbstractMeasuringCondition.loadFrom(dis);
                dis.close();
            }            
        }
        return Condition;
    }
    
    String getLinking(AbstractDevice dev,SpectrData etalon,SpectrData cur_sp){
        SensorConfig[] conf = dev.getSensorConfiguration();
        String ret = Mls.get("Checked at:")+(new Date()).toString()+"\n";
        SpectrDispers etalon_disp = etalon.Dispers;
        //SpectrDispers sp_disp = sp.Dispers;
        for(int s = 0;s<conf.length;s++)
            try{
                float[] etalon_data = etalon.getRawData().getEverModule(s);
                float[] sp_data = cur_sp.getRawData().getEverModule(s);
                ArrayList<Integer> etalon_pics = SpectrTools.findPic(etalon_data, MainConfig.getSpectrPicWidth());
                ArrayList<Integer> sp_pics = SpectrTools.findPic(sp_data, MainConfig.getSpectrPicWidth());
                ret += Mls.get("Sensor")+(s+1)+": ";
                if(etalon_pics.size() < 10){   
                    ret += Mls.get("Etalon is empty"); 
                    cur_sp.Dispers.setFunction(s, etalon_disp.getFunction(s)); 
                    continue; 
                }
                if(sp_pics.size() < 10){   
                    ret += Mls.get("Spectr is empty"); 
                    cur_sp.Dispers.setFunction(s, etalon_disp.getFunction(s));
                    continue; 
                }
                Function correction_fk = SpectrPatternFinder.findPattern(etalon_data, sp_data,
                        conf[s].ActiveFrom,conf[s].ActiveTo,
                        dev.getMaxLineValue(), 
                        MainConfig.getMaxSpectrShift());
                Function fk = etalon_disp.getFunction(s);
                ret += fk.correctXScaleBy(s, correction_fk);
                cur_sp.Dispers.setFunction(s, fk);
                updateView();
            } catch(Exception ex){
                Log.log(Level.SEVERE,"Linking error",ex);
                ret += "Linking error:"+ex.toString();
            }
            finally{
                ret += "\n";
            }
        return ret;
    } 
    
    String LinkingLog = "";
    static final String LinkingLogFileName = "last_linking_result.txt";
    private void jbCheckStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCheckStartActionPerformed
        try{
            AbstractDevice dev = Common.getDevice();
            if(dev == null)
                return;
            try {
                AbstractMeasuringCondition cond = getCurrentCondition();
                if(cond == null){
                    Dialogs.errorWarnningMLS("Не установлена программа измерений");
                    return;
                }
                
                Common.MainWindow.setEnableFull(false);

                SpectrData etalon = new SpectrData(getEtalonFile());
                if(etalon == null)
                    return;
                SpectrData data = dev.measuring(cond);
                data.save(getCurrentFile());
                jbCheckNoMeasuringActionPerformed(evt);
                /*LinkingLog = getLinking(dev,etalon,data);
                StreamTools.writeText(getFile(LinkingLogFileName), LinkingLog);
                updateView();*/
            } catch (OS4Exception ex) {
                Log.log(Level.SEVERE, "Internal error", ex);
            } catch (IOException ex) {
                Log.log(Level.SEVERE, "IOException", ex);
            }
        }catch(Exception ex){
            Log.log(Level.SEVERE,"Device checking error.",ex);
        }
        finally{
            Common.MainWindow.setEnableFull(true);
        }
    }//GEN-LAST:event_jbCheckStartActionPerformed

    private void jbCheckNoMeasuringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCheckNoMeasuringActionPerformed
        try{
            AbstractDevice dev = Common.getDevice();
            if(dev == null)
                return;
            
            Common.MainWindow.setEnableFull(false);
            
            SpectrData etalon = new SpectrData(getEtalonFile(),SpectrData.LevelRawData);
            SpectrData data = new SpectrData(getCurrentFile(),SpectrData.LevelRawData);
            LinkingLog = getLinking(dev,etalon,data);
            StreamTools.writeText(getFile(LinkingLogFileName), LinkingLog);
            data.save();
            dev.setDisper(new SpectrDispers(data.Dispers));
            updateView();
        }catch(Exception ex){
            Log.log(Level.SEVERE,"Device checking without measuring error...",ex);
        }
        finally{
            Common.MainWindow.setEnableFull(true);
        }
    }//GEN-LAST:event_jbCheckNoMeasuringActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbCheckNoMeasuring;
    private javax.swing.JButton jbCheckStart;
    private javax.swing.JButton jbResultsIsOk;
    private javax.swing.JButton jbSkipCheck;
    private javax.swing.JPanel jpSpCont;
    // End of variables declaration//GEN-END:variables

    @Override
    public int GetUserLevel() {
        return Common.USER_LEVEL_LABORANT;
    }

    final void updateView() throws IOException{
        File f = getEtalonFile();
        if(f.exists()){
            BaseSpectr = new SpectrData(f);
            View = SpectrView.init(BaseSpectr, View);
        } else
            BaseSpectr = null;
        f = getCurrentFile();
        if(f.exists()){
            CurrentSpectr = new SpectrData(f);
            SpectrView.initSecond(CurrentSpectr);
        } else
            CurrentSpectr = null;
        SpectrView.clearTextInfo();
        SpectrView.addTextInfo(LinkingLog);
        SpectrView.repaint();
    }
    
    SpectrData BaseSpectr;
    SpectrData CurrentSpectr;
    Rectangle3D View;
    @Override
    public JPanel open() {
        try{
            LinkingLog = StreamTools.readText(getFile(LinkingLogFileName));
            updateView();
        } catch(Exception ex){
            Log.log(Level.SEVERE,"Loading spectr error",ex);
        }
        return this;
    }

    @Override
    public void close() {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public String getGUIName() {
        return Mls.get("Проверка оборудования");
    }
}
