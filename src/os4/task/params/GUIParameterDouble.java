/*
 * The MIT License
 *
 * Copyright 2014 root.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package os4.task.params;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import os4.OS4ExceptionInternalError;
import os4.serv.StreamTools;
import os4.Common;

/**
 *
 * @author root
 */
public class GUIParameterDouble extends javax.swing.JPanel 
            implements AbstractGUIParameter {
    private static final Logger Log = Common.getLogger( GUIParameterDouble.class );
    
    double DefaultValue = 0;
    double Value;
    double Step = 1;
    int AfterDot = 0;
    double Min = 0,Max = 100;
    String Pattern = "###0.0"; //###0.000
    String Id,Description;
    
    public GUIParameterDouble(){
        
    }
    /**
     * Creates new form GUIParameterDouble
     * @param id
     * @param description
     * @param default_value
     * @param step
     * @param after_dot
     * @param min
     * @param max
     * @param pattern
     */
    public GUIParameterDouble(String id,
            String description,
            double default_value,
            double step,int after_dot,
            double min,double max,
            String pattern) {
        Description = description;
        Id = id;
        DefaultValue = default_value;
        Value = DefaultValue;
        Step = step;
        AfterDot = after_dot;
        Max = max;
        Min = min;
        Pattern = pattern;
    }
    
    boolean IsIniting = false;
    void reInit(){
        IsIniting = true;
        jspValueEditor.setModel(new javax.swing.SpinnerNumberModel(Value, Min, Max, Step));
        JSpinner.NumberEditor editor = (JSpinner.NumberEditor)jspValueEditor.getEditor(); 
        DecimalFormat format = editor.getFormat();
        format.setMinimumFractionDigits(AfterDot);
        format.setMaximumFractionDigits(AfterDot);
        format.applyPattern(Pattern);//"###0.000");
        
        jlDesc.setText(Description);
        
        IsIniting = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlDesc = new javax.swing.JLabel();
        jspValueEditor = new javax.swing.JSpinner();

        jlDesc.setText("jlDesc");

        jspValueEditor.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 100000.0d, 1.0d));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jspValueEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jlDesc))
                .addContainerGap(612, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlDesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspValueEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(308, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jlDesc;
    private javax.swing.JSpinner jspValueEditor;
    // End of variables declaration//GEN-END:variables

    boolean IsInited = false;
    @Override
    public JPanel getGui() {
        if(IsInited == false){
            initComponents();
            reInit();
            IsInited = true;
            jspValueEditor.getModel().addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    try{
                        if(IsIniting == false){
                            Master.commit();
                            Value = (double)jspValueEditor.getValue();
                        }
                    }
                    catch(Exception ex){Log.log(Level.SEVERE,"Save "+Id+" error",ex);}
                }
            });
        }
        return this;
    }

    @Override
    public String getId() {
        return Id;
    }

    @Override
    public void load(DataInputStream str) throws IOException, OS4ExceptionInternalError {
        StreamTools.versionBlockBegin(str, 1, 1);
        Id = StreamTools.readString(str);
        Description = StreamTools.readString(str);
        DefaultValue = str.readDouble();
        Value = str.readDouble();
        Step = str.readDouble();
        AfterDot = str.readInt();
        Min = str.readDouble();
        Max = str.readDouble();
        Pattern = StreamTools.readString(str);
        StreamTools.versionBlockEnd(str);
    }

    @Override
    public void save(DataOutputStream str) throws IOException, OS4ExceptionInternalError {
        StreamTools.versionBlockBegin(str, 1);
        StreamTools.writeString(Id, str);//String Id;
        StreamTools.writeString(Description, str);//String Description;
        str.writeDouble(DefaultValue);// = str.readDouble();
        str.writeDouble(Value);// = str.readDouble();
        str.writeDouble(Step);// = str.readDouble();
        str.writeInt(AfterDot);// = str.readInt();
        str.writeDouble(Min);// = str.readDouble();
        str.writeDouble(Max);// = str.readDouble();
        StreamTools.writeString(Pattern, str);//Pattern = StreamTools.readString(str);
        StreamTools.versionBlockEnd(str);
    }

    @Override
    public void reset() {
        jspValueEditor.setValue(DefaultValue);
    }

    @Override
    public int getType() {
        return AbstractGUIParameter.TypeDouble;
    }

    GUIParameterCollection Master;
    @Override
    public GUIParameterCollection getMaster() {
        return Master;
    }

    @Override
    public void initMaster(GUIParameterCollection master) {
        Master = master;
    }
    
    @Override
    public String toString(){
        return AbstractGUIParameter.getShortDescription(Description);
    }

    @Override
    public double getAsDouble() {
        return Value;
    }

    @Override
    public String getAsString() {
        return ""+Value;
    }
}
