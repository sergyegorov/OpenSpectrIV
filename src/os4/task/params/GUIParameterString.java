/*
 * The MIT License
 *
 * Copyright 2014 root.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package os4.task.params;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import os4.OS4ExceptionInternalError;
import os4.serv.StreamTools;
import os4.Common;

/**
 *
 * @author root
 */
public class GUIParameterString extends javax.swing.JPanel 
                    implements AbstractGUIParameter {
    private static final Logger Log = Common.getLogger( GUIParameterDouble.class );
    /**
     * Creates new form GUIParameterString
     */
    public GUIParameterString() {
        
    }
    
    String Id,Description,DefaultValue,Value;
    public GUIParameterString(String id, String description,
            String default_value,String value) {
        Id = id;
        Description = description;
        DefaultValue = default_value;
        Value = value;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlDescription = new javax.swing.JLabel();
        jtfValueField = new javax.swing.JTextField();

        jlDescription.setText("jLabel1");

        jtfValueField.setText("jTextField1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlDescription)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jtfValueField, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(297, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jlDescription;
    private javax.swing.JTextField jtfValueField;
    // End of variables declaration//GEN-END:variables

    void updated(){
        try{
            Value = jtfValueField.getText();
            Master.commit();
        }catch(Exception ex){
            Log.log(Level.SEVERE,"Commit value from '"+Id+"' string value error!",ex);
        }
    }
    
    boolean IsInited = false;
    @Override
    public JPanel getGui() {
        if(IsInited == false){
            IsInited = true;
            initComponents();
            jtfValueField.setText(Value);
            jtfValueField.getDocument().addDocumentListener(new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    updated();
                }
                @Override
                public void removeUpdate(DocumentEvent e) {
                    updated();
                }
                @Override
                public void changedUpdate(DocumentEvent e) {
                    updated();
                }
            });
        }
        return this;
    }

    @Override
    public String getId() {
        return Id;
    }

    @Override
    public void load(DataInputStream str) throws IOException, OS4ExceptionInternalError {
        StreamTools.versionBlockBegin(str, 1, 1);
        Id = StreamTools.readString(str);
        Description = StreamTools.readString(str);
        DefaultValue = StreamTools.readString(str);
        Value = StreamTools.readString(str);
        StreamTools.versionBlockEnd(str);
    }

    @Override
    public void save(DataOutputStream str) throws IOException, OS4ExceptionInternalError {
        StreamTools.versionBlockBegin(str, 1);
        StreamTools.writeString(Id, str);//String Id;
        StreamTools.writeString(Description, str);//String Description;
        StreamTools.writeString(DefaultValue,str);// = str.readDouble();
        StreamTools.writeString(Value,str);// = str.readDouble();
        StreamTools.versionBlockEnd(str);
    }

    @Override
    public void reset() {
        jtfValueField.setText(DefaultValue);
    }

    @Override
    public int getType() {
        return AbstractGUIParameter.TypeString;
    }

    @Override
    public GUIParameterCollection getMaster() {
        return Master;
    }

    GUIParameterCollection Master;
    @Override
    public void initMaster(GUIParameterCollection master) {
        Master = master;
    }

    @Override
    public double getAsDouble() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public String getAsString() {
        return jtfValueField.getText();
    }
    
    @Override
    public String toString(){
        return AbstractGUIParameter.getShortDescription(Description);
    }
}
