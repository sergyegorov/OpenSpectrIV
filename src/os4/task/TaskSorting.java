/*
 * The MIT License
 *
 * Copyright 2014 root.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package os4.task;

import java.awt.BorderLayout;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import os4.Common;
import os4.Mls;
import os4.OS4Exception;
import os4.dev.AbstractDevice;
import os4.dev.AbstractMeasuringCondition;
import os4.dev.SpectrData;
import os4.serv.Dialogs;
import os4.serv.Rectangle3D;
import os4.task.comp.CustomDrawingViewer;
import os4.task.comp.FolderViewer;
import os4.task.comp.FolderViewer.TreeNodeUserObject;
import os4.task.comp.OSP4TreeListener;

/**
 *
 * @author root
 */
public class TaskSorting extends javax.swing.JPanel implements AbstractTask,
        OSP4TreeListener{
    private static final Logger Log = Common.getLogger( TaskSorting.class );

    //File BaseDirPriv;
    /**
     * Creates new form TaskSorting
     */
    public TaskSorting() {
        initComponents();
        FolderViewer folderViewer1 = new FolderViewer(
                getFile(null),"mf",Common.SpectrExt);
        jSplitPane1.setLeftComponent(folderViewer1);
        folderViewer1.setupCallBackNewFile("Измерить новую пробу", this);
        folderViewer1.setupCallBackSelect("Измеренные пробы", this);
        Mls.translate(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbCondition = new javax.swing.JButton();
        jpViewPanel = new javax.swing.JPanel();

        jSplitPane1.setDividerLocation(220);
        jSplitPane1.setResizeWeight(0.1);
        jSplitPane1.setLastDividerLocation(200);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jbCondition.setText("Условия измерения");
        jbCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConditionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 254, Short.MAX_VALUE)
                .addComponent(jbCondition))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jbCondition)
        );

        jpViewPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jpViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setRightComponent(jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    AbstractMeasuringCondition Condition = null;
    File ConditionFile;
    private AbstractMeasuringCondition getCurrentCondition() throws FileNotFoundException, IOException{
        if(Condition == null){
            ConditionFile = getFile("condition.bin");
            if(ConditionFile.exists()){
                FileInputStream fis = new FileInputStream(ConditionFile);
                BufferedInputStream bis = new BufferedInputStream(fis);
                DataInputStream dis = new DataInputStream(bis);
                Condition = AbstractMeasuringCondition.loadFrom(dis);
                dis.close();
            } else {
                ConditionFile.createNewFile();
                Condition = Common.getDevice().getDefaultCondition();
                commitCondition(Condition);
            }            
        }
        return Condition;
    }
    
    void commitCondition(AbstractMeasuringCondition cond) throws FileNotFoundException, IOException{
        FileOutputStream fos = new FileOutputStream(ConditionFile);
        DataOutputStream dos = new DataOutputStream(fos);
        cond.save(dos);
        dos.flush();
        dos.close();
        Condition = cond;
    }
    
    private void jbConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConditionActionPerformed
        try{
            AbstractMeasuringCondition cond = getCurrentCondition();
            JPanel pan = cond.getGUIEditor();
            boolean ret = Dialogs.showDialogWithCustomPanelMLS("Условия измерений",pan);
            if(ret){
                commitCondition(cond);
            }
        }catch(Exception ex){
            Log.log(Level.SEVERE,"Setup sorting exposition exception...",ex);
        }
    }//GEN-LAST:event_jbConditionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jbCondition;
    private javax.swing.JPanel jpViewPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public int GetUserLevel() {
        return Common.USER_LEVEL_LABORANT;
    }

    @Override
    public String getGUIName() {
        return Mls.get("Сортировка проб");
    }

    @Override
    public JPanel open() {
        return this;
    }

    @Override
    public void close() {
        
    }

    Rectangle3D View;
    CustomDrawingViewer SpectrViewer;
    @Override
    public boolean treeCallBack(int option, TreePath path) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();
        TreeNodeUserObject tnuo = (TreeNodeUserObject)node.getUserObject();
        File f = tnuo.Path;
        switch(option){
            case FolderViewer.OptionNewFile:
                {
                    String name = null;
                    if(f.isDirectory() == false){
                        if(Dialogs.getConfirmYesNoMLS("Перемерить файл %s ?", "Перемерить", f.getAbsolutePath()) == false){
                        } else{
                            name = f.getName();
                            name = name.substring(0, name.length()-Common.SpectrExt.length()-1);
                        }
                        f = f.getParentFile();
                    }
                    if(name == null)
                        name = Dialogs.getStringMLS("Введите имя измеряемой пробы", "Начало измерения");
                    if(name == null)
                        return false;
                    AbstractDevice dev = Common.getDevice();
                    if(dev == null)
                        return false;
                    try {
                        SpectrData data = dev.measuring(getCurrentCondition());
                        String file_path = f.getAbsolutePath();
                        file_path += File.separator+name;
                        file_path += "."+Common.SpectrExt;
                        data.save(new File(file_path));
                    } catch (OS4Exception ex) {
                        Log.log(Level.SEVERE, "Internal error", ex);
                    } catch (IOException ex) {
                        Log.log(Level.SEVERE, "IOException", ex);
                    }
                }
                break;
            case FolderViewer.OptionSelect:
                try{
                    jpViewPanel.removeAll();
                    JPanel p;
                    if(f.isDirectory()){
                        p = new JPanel();
                    } else {
                        if(SpectrViewer == null)
                            SpectrViewer = new CustomDrawingViewer(getFile(null).getAbsolutePath());

                        SpectrData sd = new SpectrData(f);
                        View = SpectrViewer.init(sd,View);
                        p = SpectrViewer;
                    }
                    jpViewPanel.add(p,BorderLayout.CENTER);
                    jpViewPanel.revalidate();
                    jpViewPanel.repaint();
                }catch(Exception ex){
                    Log.log(Level.SEVERE,"Selectino error",ex);
                }
                break;
        }
        return true;
    }

    @Override
    public File getFile(String name) {
        File f;
        if(name == null){
            f = new File(Common.DirData+File.separator+"Sorting");
            if(f.exists() == false)
                f.mkdir();
        } else
            f = new File(Common.DirData+File.separator+"Sorting"+File.separator+name); 
        return f;
    }
}
